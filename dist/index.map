{"version":3,"sources":["node_modules/morphdom/dist/morphdom.js","index.js"],"names":["morphdom","require","specials","exports","createElement","tag","attributes","el","document","Object","keys","forEach","name","val","constructor","Function","indexOf","setAttribute","children","appendChild","child","String","textNode","createTextNode","Array","isArray","render","target","elementTree","length","treeRoot","onNodeAdded","node","ref","getAttribute","onNodeDiscarded"],"mappings":"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","file":"index.map","sourceRoot":"..","sourcesContent":["'use strict';\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\n\nvar testEl = doc ?\n    doc.body || doc.createElement('div') :\n    {};\n\n// Fixes <https://github.com/patrick-steele-idem/morphdom/issues/32>\n// (IE7+ support) <=IE7 does not support el.hasAttribute(name)\nvar actualHasAttributeNS;\n\nif (testEl.hasAttributeNS) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttributeNS(namespaceURI, name);\n    };\n} else if (testEl.hasAttribute) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttribute(name);\n    };\n} else {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.getAttributeNode(namespaceURI, name) != null;\n    };\n}\n\nvar hasAttributeNS = actualHasAttributeNS;\n\n\nfunction toElement(str) {\n    if (!range && doc.createRange) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment;\n    if (range && range.createContextualFragment) {\n        fragment = range.createContextualFragment(str);\n    } else {\n        fragment = doc.createElement('body');\n        fragment.innerHTML = str;\n    }\n    return fragment.childNodes[0];\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    if (toEl.actualize &&\n        fromNodeName.charCodeAt(0) < 91 && /* from tag name is upper case */\n        toNodeName.charCodeAt(0) > 90 /* target tag name is lower case */) {\n        // If the target element is a virtual DOM node then we may need to normalize the tag name\n        // before comparing. Normal HTML elements that are in the \"http://www.w3.org/1999/xhtml\"\n        // are converted to upper case\n        return fromNodeName === toNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction morphAttrs(fromNode, toNode) {\n    var attrs = toNode.attributes;\n    var i;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    attrs = fromNode.attributes;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        if (attr.specified !== false) {\n            attrName = attr.name;\n            attrNamespaceURI = attr.namespaceURI;\n\n            if (attrNamespaceURI) {\n                attrName = attr.localName || attrName;\n\n                if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {\n                    fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n                }\n            } else {\n                if (!hasAttributeNS(toNode, null, attrName)) {\n                    fromNode.removeAttribute(attrName);\n                }\n            }\n        }\n    }\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name, '');\n        }\n    }\n}\n\nvar specialElHandlers = {\n    /**\n     * Needed for IE. Apparently IE doesn't think that \"selected\" is an\n     * attribute when reading over the attributes using selectEl.attributes\n     */\n    OPTION: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!hasAttributeNS(toEl, null, 'value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!hasAttributeNS(toEl, null, 'multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            var curChild = toEl.firstChild;\n            while(curChild) {\n                var nodeName = curChild.nodeName;\n                if (nodeName && nodeName.toUpperCase() === 'OPTION') {\n                    if (hasAttributeNS(curChild, null, 'selected')) {\n                        selectedIndex = i;\n                        break;\n                    }\n                    i++;\n                }\n                curChild = curChild.nextSibling;\n            }\n\n            fromEl.selectedIndex = i;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n    return node.id;\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = {};\n        var keyedRemovalList;\n\n        function addKeyedRemoval(key) {\n            if (keyedRemovalList) {\n                keyedRemovalList.push(key);\n            } else {\n                keyedRemovalList = [key];\n            }\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    }\n                }\n\n                handleNodeAdded(curChild);\n                curChild = nextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n            var curFromNodeKey;\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it is will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (toNode.isSameNode && toNode.isSameNode(fromNode)) {\n                return;\n            }\n\n            if (!childrenOnly) {\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                morphAttrs(fromEl, toEl);\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n                var curToNodeChild = toEl.firstChild;\n                var curFromNodeChild = fromEl.firstChild;\n                var curToNodeKey;\n\n                var fromNextSibling;\n                var toNextSibling;\n                var matchingFromEl;\n\n                outer: while (curToNodeChild) {\n                    toNextSibling = curToNodeChild.nextSibling;\n                    curToNodeKey = getNodeKey(curToNodeChild);\n\n                    while (curFromNodeChild) {\n                        fromNextSibling = curFromNodeChild.nextSibling;\n\n                        if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                        var curFromNodeType = curFromNodeChild.nodeType;\n\n                        var isCompatible = undefined;\n\n                        if (curFromNodeType === curToNodeChild.nodeType) {\n                            if (curFromNodeType === ELEMENT_NODE) {\n                                // Both nodes being compared are Element nodes\n\n                                if (curToNodeKey) {\n                                    // The target node has a key so we want to match it up with the correct element\n                                    // in the original DOM tree\n                                    if (curToNodeKey !== curFromNodeKey) {\n                                        // The current element in the original DOM tree does not have a matching key so\n                                        // let's check our lookup to see if there is a matching element in the original\n                                        // DOM tree\n                                        if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                            if (curFromNodeChild.nextSibling === matchingFromEl) {\n                                                // Special case for single element removals. To avoid removing the original\n                                                // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                                // we will instead discard the current node and wait until the next\n                                                // iteration to properly match up the keyed target element with its matching\n                                                // element in the original tree\n                                                isCompatible = false;\n                                            } else {\n                                                // We found a matching keyed element somewhere in the original DOM tree.\n                                                // Let's moving the original DOM node into the current position and morph\n                                                // it.\n\n                                                // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                                // the `removeNode()` function for the node that is being discarded so that\n                                                // all lifecycle hooks are correctly invoked\n                                                fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                                fromNextSibling = curFromNodeChild.nextSibling;\n\n                                                if (curFromNodeKey) {\n                                                    // Since the node is keyed it might be matched up later so we defer\n                                                    // the actual removal to later\n                                                    addKeyedRemoval(curFromNodeKey);\n                                                } else {\n                                                    // NOTE: we skip nested keyed nodes from being removed since there is\n                                                    //       still a chance they will be matched up later\n                                                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                                }\n\n                                                curFromNodeChild = matchingFromEl;\n                                            }\n                                        } else {\n                                            // The nodes are not compatible since the \"to\" node has a key and there\n                                            // is no matching keyed node in the source tree\n                                            isCompatible = false;\n                                        }\n                                    }\n                                } else if (curFromNodeKey) {\n                                    // The original has a key\n                                    isCompatible = false;\n                                }\n\n                                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                                if (isCompatible) {\n                                    // We found compatible DOM elements so transform\n                                    // the current \"from\" node to match the current\n                                    // target DOM node.\n                                    morphEl(curFromNodeChild, curToNodeChild);\n                                }\n\n                            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                                // Both nodes being compared are Text or Comment nodes\n                                isCompatible = true;\n                                // Simply update nodeValue on the original node to\n                                // change the text value\n                                if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                                }\n\n                            }\n                        }\n\n                        if (isCompatible) {\n                            // Advance both the \"to\" child and the \"from\" child since we found a match\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        // No compatible match so remove the old node from the DOM and continue trying to find a\n                        // match in the original DOM. However, we only do this if the from node is not keyed\n                        // since it is possible that a keyed node might match up with a node somewhere else in the\n                        // target tree and we don't want to discard it just yet since it still might find a\n                        // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                        // that didn't find a home\n                        if (curFromNodeKey) {\n                            // Since the node is keyed it might be matched up later so we defer\n                            // the actual removal to later\n                            addKeyedRemoval(curFromNodeKey);\n                        } else {\n                            // NOTE: we skip nested keyed nodes from being removed since there is\n                            //       still a chance they will be matched up later\n                            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                        }\n\n                        curFromNodeChild = fromNextSibling;\n                    }\n\n                    // If we got this far then we did not find a candidate match for\n                    // our \"to node\" and we exhausted all of the children \"from\"\n                    // nodes. Therefore, we will just append the current \"to\" node\n                    // to the end\n                    if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                        fromEl.appendChild(matchingFromEl);\n                        morphEl(matchingFromEl, curToNodeChild);\n                    } else {\n                        var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                        if (onBeforeNodeAddedResult !== false) {\n                            if (onBeforeNodeAddedResult) {\n                                curToNodeChild = onBeforeNodeAddedResult;\n                            }\n\n                            if (curToNodeChild.actualize) {\n                                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                            }\n                            fromEl.appendChild(curToNodeChild);\n                            handleNodeAdded(curToNodeChild);\n                        }\n                    }\n\n                    curToNodeChild = toNextSibling;\n                    curFromNodeChild = fromNextSibling;\n                }\n\n                // We have processed all of the \"to nodes\". If curFromNodeChild is\n                // non-null then we still have some from nodes left over that need\n                // to be removed\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n                    if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n                    curFromNodeChild = fromNextSibling;\n                }\n            }\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphEl(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nmodule.exports = morphdom;\n","var morphdom = require('morphdom')\n\nvar specials = ['className', 'id']\n\nexports.createElement = function (tag, attributes, ...children) {\n  var el = document.createElement(tag)\n  if (attributes) {\n    Object.keys(attributes).forEach(function (name) {\n      var val = attributes[name]\n      if (val && val.constructor === Function) {\n        el[name] = val\n        return\n      }\n      if (specials.indexOf(name) !== -1) {\n        el[name] = val\n        return\n      }\n      el.setAttribute(name, val)\n    })\n  }\n  children.forEach(function appendChild (child) {\n    if (child && child.constructor === String) {\n      var textNode = document.createTextNode(child)\n      el.appendChild(textNode)\n      return\n    }\n    if (Array.isArray(child)) {\n      child.forEach(appendChild)\n      return\n    }\n    el.appendChild(child)\n  })\n\n  return el\n}\n\nexports.render = function (target, elementTree) {\n  if (target.children.length === 0) {\n    target.appendChild(elementTree)\n  }\n  var treeRoot = target.children[0]\n  morphdom(treeRoot, elementTree, {\n    onNodeAdded: function (node) {\n      var ref = node.getAttribute && node.getAttribute('ref')\n      if (ref) target[ref] = node\n    },\n    onNodeDiscarded: function (node) {\n      var ref = node.getAttribute && node.getAttribute('ref')\n      if (ref) target[ref] = null\n    }\n  })\n}\n"]}